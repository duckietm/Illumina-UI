{"version":3,"file":"canvas-renderer.min.mjs","sources":["../../../../node_modules/tslib/tslib.es6.js","../../src/utils/CanvasMaskManager.ts","../../src/utils/canUseNewCanvasBlendModes.ts","../../src/CanvasRenderer.ts","../../src/utils/mapCanvasBlendModesToPixi.ts","../../src/canvasUtils.ts","../../src/Renderer.ts","../../src/BaseTexture.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import type { Polygon } from '@pixi/math';\nimport { SHAPES } from '@pixi/math';\n\nimport type { CanvasRenderer } from '../CanvasRenderer';\nimport type { Graphics } from '@pixi/graphics';\nimport type { MaskData } from '@pixi/core';\nimport type { Container } from '@pixi/display';\n\n/**\n * A set of functions used to handle masking.\n *\n * Sprite masking is not supported on the CanvasRenderer.\n * @class\n * @memberof PIXI\n */\nexport class CanvasMaskManager\n{\n    /** A reference to the current renderer */\n    private renderer: CanvasRenderer;\n    private _foundShapes: Array<Graphics> = [];\n\n    /** @param renderer - A reference to the current renderer */\n    constructor(renderer: CanvasRenderer)\n    {\n        this.renderer = renderer;\n    }\n\n    /**\n     * This method adds it to the current stack of masks.\n     * @param maskData - the maskData that will be pushed\n     */\n    pushMask(maskData: MaskData | Graphics): void\n    {\n        const renderer = this.renderer;\n        const maskObject = ((maskData as MaskData).maskObject || maskData) as Container;\n\n        renderer.context.save();\n\n        // TODO support sprite alpha masks??\n        // lots of effort required. If demand is great enough..\n\n        const foundShapes = this._foundShapes;\n\n        this.recursiveFindShapes(maskObject, foundShapes);\n        if (foundShapes.length > 0)\n        {\n            const { context } = renderer;\n\n            context.beginPath();\n\n            for (let i = 0; i < foundShapes.length; i++)\n            {\n                const shape = foundShapes[i];\n                const transform = shape.transform.worldTransform;\n\n                this.renderer.setContextTransform(transform);\n\n                this.renderGraphicsShape(shape);\n            }\n\n            foundShapes.length = 0;\n            context.clip();\n        }\n    }\n\n    /**\n     * Renders all PIXI.Graphics shapes in a subtree.\n     * @param container - container to scan.\n     * @param out - where to put found shapes\n     */\n    recursiveFindShapes(container: Container, out: Array<Graphics>): void\n    {\n        if ((container as Graphics).geometry && (container as Graphics).geometry.graphicsData)\n        {\n            out.push(container as Graphics);\n        }\n\n        const { children } = container;\n\n        if (children)\n        {\n            for (let i = 0; i < children.length; i++)\n            {\n                this.recursiveFindShapes(children[i] as Container, out);\n            }\n        }\n    }\n\n    /**\n     * Renders a PIXI.Graphics shape.\n     * @param graphics - The object to render.\n     */\n    renderGraphicsShape(graphics: Graphics): void\n    {\n        graphics.finishPoly();\n\n        const context = this.renderer.context;\n        const graphicsData = graphics.geometry.graphicsData;\n        const len = graphicsData.length;\n\n        if (len === 0)\n        {\n            return;\n        }\n\n        for (let i = 0; i < len; i++)\n        {\n            const data = graphicsData[i];\n            const shape = data.shape;\n\n            if (shape.type === SHAPES.POLY)\n            {\n                let points = shape.points;\n                const holes = data.holes;\n                let outerArea;\n                let innerArea;\n                let px;\n                let py;\n\n                context.moveTo(points[0], points[1]);\n\n                for (let j = 1; j < points.length / 2; j++)\n                {\n                    context.lineTo(points[j * 2], points[(j * 2) + 1]);\n                }\n                if (holes.length > 0)\n                {\n                    outerArea = 0;\n                    px = points[0];\n                    py = points[1];\n                    for (let j = 2; j + 2 < points.length; j += 2)\n                    {\n                        outerArea += ((points[j] - px) * (points[j + 3] - py))\n                            - ((points[j + 2] - px) * (points[j + 1] - py));\n                    }\n\n                    for (let k = 0; k < holes.length; k++)\n                    {\n                        points = (holes[k].shape as Polygon).points;\n\n                        if (!points)\n                        {\n                            continue;\n                        }\n\n                        innerArea = 0;\n                        px = points[0];\n                        py = points[1];\n                        for (let j = 2; j + 2 < points.length; j += 2)\n                        {\n                            innerArea += ((points[j] - px) * (points[j + 3] - py))\n                                - ((points[j + 2] - px) * (points[j + 1] - py));\n                        }\n\n                        if (innerArea * outerArea < 0)\n                        {\n                            context.moveTo(points[0], points[1]);\n\n                            for (let j = 2; j < points.length; j += 2)\n                            {\n                                context.lineTo(points[j], points[j + 1]);\n                            }\n                        }\n                        else\n                        {\n                            context.moveTo(points[points.length - 2], points[points.length - 1]);\n\n                            for (let j = points.length - 4; j >= 0; j -= 2)\n                            {\n                                context.lineTo(points[j], points[j + 1]);\n                            }\n                        }\n\n                        if ((holes[k].shape as Polygon).closeStroke)\n                        {\n                            context.closePath();\n                        }\n                    }\n                }\n                // if the first and last point are the same close the path - much neater :)\n                if (points[0] === points[points.length - 2] && points[1] === points[points.length - 1])\n                {\n                    context.closePath();\n                }\n            }\n            else if (shape.type === SHAPES.RECT)\n            {\n                context.rect(shape.x, shape.y, shape.width, shape.height);\n                context.closePath();\n            }\n            else if (shape.type === SHAPES.CIRC)\n            {\n                // TODO - need to be Undefined!\n                context.arc(shape.x, shape.y, shape.radius, 0, 2 * Math.PI);\n                context.closePath();\n            }\n            else if (shape.type === SHAPES.ELIP)\n            {\n                // ellipse code taken from: http://stackoverflow.com/questions/2172798/how-to-draw-an-oval-in-html5-canvas\n\n                const w = shape.width * 2;\n                const h = shape.height * 2;\n\n                const x = shape.x - (w / 2);\n                const y = shape.y - (h / 2);\n\n                const kappa = 0.5522848;\n                const ox = (w / 2) * kappa; // control point offset horizontal\n                const oy = (h / 2) * kappa; // control point offset vertical\n                const xe = x + w; // x-end\n                const ye = y + h; // y-end\n                const xm = x + (w / 2); // x-middle\n                const ym = y + (h / 2); // y-middle\n\n                context.moveTo(x, ym);\n                context.bezierCurveTo(x, ym - oy, xm - ox, y, xm, y);\n                context.bezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym);\n                context.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);\n                context.bezierCurveTo(xm - ox, ye, x, ym + oy, x, ym);\n                context.closePath();\n            }\n            else if (shape.type === SHAPES.RREC)\n            {\n                const rx = shape.x;\n                const ry = shape.y;\n                const width = shape.width;\n                const height = shape.height;\n                let radius = shape.radius;\n\n                const maxRadius = Math.min(width, height) / 2;\n\n                radius = radius > maxRadius ? maxRadius : radius;\n\n                context.moveTo(rx, ry + radius);\n                context.lineTo(rx, ry + height - radius);\n                context.quadraticCurveTo(rx, ry + height, rx + radius, ry + height);\n                context.lineTo(rx + width - radius, ry + height);\n                context.quadraticCurveTo(rx + width, ry + height, rx + width, ry + height - radius);\n                context.lineTo(rx + width, ry + radius);\n                context.quadraticCurveTo(rx + width, ry, rx + width - radius, ry);\n                context.lineTo(rx + radius, ry);\n                context.quadraticCurveTo(rx, ry, rx, ry + radius);\n                context.closePath();\n            }\n        }\n    }\n\n    /**\n     * Restores the current drawing context to the state it was before the mask was applied.\n     * @param renderer - The renderer context to use.\n     */\n    popMask(renderer: CanvasRenderer): void\n    {\n        renderer.context.restore();\n        renderer.invalidateBlendMode();\n    }\n\n    /** Destroys this canvas mask manager. */\n    public destroy(): void\n    {\n        /* empty */\n    }\n}\n","import { settings } from '@pixi/settings';\n\n/**\n * Creates a little colored canvas\n * @ignore\n * @param {string} color - The color to make the canvas\n * @returns {HTMLCanvasElement} a small canvas element\n */\nfunction createColoredCanvas(color: string): HTMLCanvasElement\n{\n    const canvas = settings.ADAPTER.createCanvas(6, 1);\n    const context = canvas.getContext('2d');\n\n    context.fillStyle = color;\n    context.fillRect(0, 0, 6, 1);\n\n    return canvas;\n}\n\n/**\n * Checks whether the Canvas BlendModes are supported by the current browser\n * @private\n * @returns {boolean} whether they are supported\n */\nexport function canUseNewCanvasBlendModes(): boolean\n{\n    if (typeof document === 'undefined')\n    {\n        return false;\n    }\n\n    const magenta = createColoredCanvas('#ff00ff');\n    const yellow = createColoredCanvas('#ffff00');\n\n    const canvas = settings.ADAPTER.createCanvas(6, 1);\n    const context = canvas.getContext('2d');\n\n    context.globalCompositeOperation = 'multiply';\n    context.drawImage(magenta, 0, 0);\n    context.drawImage(yellow, 2, 0);\n\n    const imageData = context.getImageData(2, 0, 1, 1);\n\n    if (!imageData)\n    {\n        return false;\n    }\n\n    const data = imageData.data;\n\n    return (data[0] === 255 && data[1] === 0 && data[2] === 0);\n}\n","import {\n    AbstractRenderer,\n    CanvasResource,\n    RenderTexture,\n    BaseRenderTexture,\n    extensions,\n    ExtensionType } from '@pixi/core';\nimport { CanvasRenderTarget, sayHello, rgb2hex, hex2string, deprecation } from '@pixi/utils';\nimport { CanvasMaskManager } from './utils/CanvasMaskManager';\nimport { mapCanvasBlendModesToPixi } from './utils/mapCanvasBlendModesToPixi';\nimport { RENDERER_TYPE, SCALE_MODES, BLEND_MODES } from '@pixi/constants';\nimport { settings } from '@pixi/settings';\nimport { Matrix } from '@pixi/math';\n\nimport type { DisplayObject } from '@pixi/display';\nimport type {\n    IRendererOptions,\n    IRendererPlugin,\n    IRendererPlugins,\n    IRendererRenderOptions\n} from '@pixi/core';\n\nconst tempMatrix = new Matrix();\n\nexport interface ICanvasRendererPluginConstructor\n{\n    new (renderer: CanvasRenderer, options?: any): IRendererPlugin;\n}\n\nexport interface ICanvasRendererPlugins\n{\n    [key: string]: any;\n}\n\n/*\n * Different browsers support different smoothing property names\n * this is the list of all platform props.\n */\ntype SmoothingEnabledProperties =\n    'imageSmoothingEnabled' |\n    'webkitImageSmoothingEnabled' |\n    'mozImageSmoothingEnabled' |\n    'oImageSmoothingEnabled' |\n    'msImageSmoothingEnabled';\n\n/**\n * Rendering context for all browsers. This includes platform-specific\n * properties that are not included in the spec for CanvasRenderingContext2D\n * @private\n */\nexport interface CrossPlatformCanvasRenderingContext2D extends CanvasRenderingContext2D\n{\n    webkitImageSmoothingEnabled: boolean;\n    mozImageSmoothingEnabled: boolean;\n    oImageSmoothingEnabled: boolean;\n    msImageSmoothingEnabled: boolean;\n}\n\n/**\n * The CanvasRenderer draws the scene and all its content onto a 2d canvas.\n *\n * This renderer should be used for browsers that do not support WebGL.\n * Don't forget to add the CanvasRenderer.view to your DOM or you will not see anything!\n * @class\n * @memberof PIXI\n * @extends PIXI.AbstractRenderer\n */\nexport class CanvasRenderer extends AbstractRenderer\n{\n    /**\n     * Fired after rendering finishes.\n     * @event PIXI.CanvasRenderer#postrender\n     */\n    /**\n     * Fired before rendering starts.\n     * @event PIXI.CanvasRenderer#prerender\n     */\n\n    /** The root canvas 2d context that everything is drawn with. */\n    public readonly rootContext: CrossPlatformCanvasRenderingContext2D;\n    /** The currently active canvas 2d context (could change with renderTextures) */\n    public context: CrossPlatformCanvasRenderingContext2D;\n    /** Boolean flag controlling canvas refresh. */\n    public refresh = true;\n    /**\n     * Instance of a CanvasMaskManager, handles masking when using the canvas renderer.\n     * @member {PIXI.CanvasMaskManager}\n     */\n    public maskManager: CanvasMaskManager = new CanvasMaskManager(this);\n    /** The canvas property used to set the canvas smoothing property. */\n    public smoothProperty: SmoothingEnabledProperties = 'imageSmoothingEnabled';\n    /** Tracks the blend modes useful for this renderer. */\n    public readonly blendModes: string[] = mapCanvasBlendModesToPixi();\n    public renderingToScreen = false;\n\n    private _activeBlendMode: BLEND_MODES = null;\n    /** Projection transform, passed in render() stored here */\n    private _projTransform: Matrix = null;\n\n    /** @private */\n    _outerBlend = false;\n\n    /**\n     * @param {PIXI.IRendererOptions} [options] - The optional renderer parameters.\n     * @param {boolean} [options.autoDensity=false] -\n     *  Whether the CSS dimensions of the renderer's view should be resized automatically.\n     * @param {number} [options.backgroundAlpha=1] -\n     *  Transparency of the background color, value from `0` (fully transparent) to `1` (fully opaque).\n     * @param {number} [options.backgroundColor=0x000000] -\n     *  The background color used to clear the canvas. It accepts hex numbers (e.g. `0xff0000`).\n     * @param {boolean} [options.clearBeforeRender=true] - Whether to clear the canvas before new render passes.\n     * @param {number} [options.height=600] - The height of the renderer's view.\n     * @param {number} [options.resolution=PIXI.settings.RESOLUTION] -\n     *  The resolution / device pixel ratio of the renderer.\n     * @param {boolean} [options.transparent] -\n     *  **Deprecated since 6.0.0, Use `backgroundAlpha` instead.** \\\n     *  `true` sets `backgroundAlpha` to `0`, `false` sets `backgroundAlpha` to `1`.\n     * @param {boolean} [options.useContextAlpha=true] -\n     *  Pass-through value for canvas' context attribute `alpha`. This option is for cases where the\n     *  canvas needs to be opaque, possibly for performance reasons on some older devices.\n     *  If you want to set transparency, please use `backgroundAlpha`.\n     * @param {HTMLCanvasElement} [options.view=null] -\n     *  The canvas to use as the view. If omitted, a new canvas will be created.\n     * @param {number} [options.width=800] - The width of the renderer's view.\n     */\n    constructor(options?: IRendererOptions)\n    {\n        super(RENDERER_TYPE.CANVAS, options);\n\n        this.rootContext = this.view.getContext('2d', { alpha: this.useContextAlpha }) as\n            CrossPlatformCanvasRenderingContext2D;\n\n        this.context = this.rootContext;\n\n        if (!this.rootContext.imageSmoothingEnabled)\n        {\n            const rc = this.rootContext;\n\n            if (rc.webkitImageSmoothingEnabled)\n            {\n                this.smoothProperty = 'webkitImageSmoothingEnabled';\n            }\n            else if (rc.mozImageSmoothingEnabled)\n            {\n                this.smoothProperty = 'mozImageSmoothingEnabled';\n            }\n            else if (rc.oImageSmoothingEnabled)\n            {\n                this.smoothProperty = 'oImageSmoothingEnabled';\n            }\n            else if (rc.msImageSmoothingEnabled)\n            {\n                this.smoothProperty = 'msImageSmoothingEnabled';\n            }\n        }\n\n        this.initPlugins(CanvasRenderer.__plugins);\n\n        sayHello('Canvas');\n\n        this.resize(this.options.width, this.options.height);\n    }\n\n    /** Adds a new system to the renderer. It does nothing in the CanvasRenderer. */\n    addSystem(): this\n    {\n        return this;\n    }\n\n    /**\n     * Renders the object to its WebGL view.\n     * @param displayObject - The object to be rendered.\n     * @param options - Object to use for render options.\n     * @param {PIXI.RenderTexture} [options.renderTexture] - The render texture to render to.\n     * @param {boolean} [options.clear=true] - Should the canvas be cleared before the new render.\n     * @param {PIXI.Matrix} [options.transform] - A transform to apply to the render texture before rendering.\n     * @param {boolean} [options.skipUpdateTransform=false] - Should we skip the update transform pass?\n     */\n    render(displayObject: DisplayObject, options?: IRendererRenderOptions): void;\n\n    /**\n     * Please use the `option` render arguments instead.\n     * @deprecated Since 6.0.0\n     * @param displayObject - The object to be rendered.\n     * @param renderTexture - The render texture to render to.\n     * @param clear - Should the canvas be cleared before the new render.\n     * @param transform - A transform to apply to the render texture before rendering.\n     * @param skipUpdateTransform - Should we skip the update transform pass?\n     */\n    render(displayObject: DisplayObject, renderTexture?: RenderTexture | BaseRenderTexture,\n        clear?: boolean, transform?: Matrix, skipUpdateTransform?: boolean): void;\n\n    /** @ignore */\n    public render(displayObject: DisplayObject, options?: IRendererRenderOptions | RenderTexture | BaseRenderTexture): void\n    {\n        if (!this.view)\n        {\n            return;\n        }\n\n        let renderTexture: BaseRenderTexture | RenderTexture;\n        let clear: boolean;\n        let transform: Matrix;\n        let skipUpdateTransform: boolean;\n\n        if (options)\n        {\n            if (options instanceof RenderTexture || options instanceof BaseRenderTexture)\n            {\n                // #if _DEBUG\n                deprecation('6.0.0', 'CanvasRenderer#render arguments changed, use options instead.');\n                // #endif\n\n                /* eslint-disable prefer-rest-params */\n                renderTexture = options;\n                clear = arguments[2];\n                transform = arguments[3];\n                skipUpdateTransform = arguments[4];\n                /* eslint-enable prefer-rest-params */\n            }\n            else\n            {\n                renderTexture = options.renderTexture;\n                clear = options.clear;\n                transform = options.transform;\n                skipUpdateTransform = options.skipUpdateTransform;\n            }\n        }\n\n        // can be handy to know!\n        this.renderingToScreen = !renderTexture;\n\n        this.emit('prerender');\n\n        const rootResolution = this.resolution;\n\n        if (renderTexture)\n        {\n            renderTexture = renderTexture.castToBaseTexture() as BaseRenderTexture;\n\n            if (!renderTexture._canvasRenderTarget)\n            {\n                renderTexture._canvasRenderTarget = new CanvasRenderTarget(\n                    renderTexture.width,\n                    renderTexture.height,\n                    renderTexture.resolution\n                );\n                renderTexture.resource = new CanvasResource(renderTexture._canvasRenderTarget.canvas);\n                renderTexture.valid = true;\n            }\n\n            this.context = renderTexture._canvasRenderTarget.context as CrossPlatformCanvasRenderingContext2D;\n            this.resolution = renderTexture._canvasRenderTarget.resolution;\n        }\n        else\n        {\n            this.context = this.rootContext;\n        }\n\n        const context = this.context;\n\n        this._projTransform = transform || null;\n\n        if (!renderTexture)\n        {\n            this._lastObjectRendered = displayObject;\n        }\n\n        if (!skipUpdateTransform)\n        {\n            // update the scene graph\n            const cacheParent = displayObject.enableTempParent();\n\n            displayObject.updateTransform();\n            displayObject.disableTempParent(cacheParent);\n        }\n\n        context.save();\n        context.setTransform(1, 0, 0, 1, 0, 0);\n        context.globalAlpha = 1;\n        this._activeBlendMode = BLEND_MODES.NORMAL;\n        this._outerBlend = false;\n        context.globalCompositeOperation = this.blendModes[BLEND_MODES.NORMAL];\n\n        if (clear !== undefined ? clear : this.clearBeforeRender)\n        {\n            if (this.renderingToScreen)\n            {\n                context.clearRect(0, 0, this.width, this.height);\n\n                if (this.backgroundAlpha > 0)\n                {\n                    context.globalAlpha = this.useContextAlpha ? this.backgroundAlpha : 1;\n                    context.fillStyle = this._backgroundColorString;\n                    context.fillRect(0, 0, this.width, this.height);\n                    context.globalAlpha = 1;\n                }\n            }\n            else\n            {\n                renderTexture = (renderTexture as BaseRenderTexture);\n                renderTexture._canvasRenderTarget.clear();\n\n                const clearColor = renderTexture.clearColor;\n\n                if (clearColor[3] > 0)\n                {\n                    context.globalAlpha = this.useContextAlpha ? clearColor[3] : 1;\n                    context.fillStyle = hex2string(rgb2hex(clearColor));\n                    context.fillRect(0, 0, renderTexture.realWidth, renderTexture.realHeight);\n                    context.globalAlpha = 1;\n                }\n            }\n        }\n\n        // TODO RENDER TARGET STUFF HERE..\n        const tempContext = this.context;\n\n        this.context = context;\n        displayObject.renderCanvas(this);\n        this.context = tempContext;\n\n        context.restore();\n\n        this.resolution = rootResolution;\n        this._projTransform = null;\n\n        this.emit('postrender');\n    }\n\n    /**\n     * Sets matrix of context.\n     * called only from render() methods\n     * takes care about resolution\n     * @param transform - world matrix of current element\n     * @param roundPixels - whether to round (tx,ty) coords\n     * @param localResolution - If specified, used instead of `renderer.resolution` for local scaling\n     */\n    setContextTransform(transform: Matrix, roundPixels?: boolean, localResolution?: number): void\n    {\n        let mat = transform;\n        const proj = this._projTransform;\n        const resolution = this.resolution;\n\n        localResolution = localResolution || resolution;\n\n        if (proj)\n        {\n            mat = tempMatrix;\n            mat.copyFrom(transform);\n            mat.prepend(proj);\n        }\n\n        if (roundPixels)\n        {\n            this.context.setTransform(\n                mat.a * localResolution,\n                mat.b * localResolution,\n                mat.c * localResolution,\n                mat.d * localResolution,\n                (mat.tx * resolution) | 0,\n                (mat.ty * resolution) | 0\n            );\n        }\n        else\n        {\n            this.context.setTransform(\n                mat.a * localResolution,\n                mat.b * localResolution,\n                mat.c * localResolution,\n                mat.d * localResolution,\n                mat.tx * resolution,\n                mat.ty * resolution\n            );\n        }\n    }\n\n    /**\n     * Clear the canvas of renderer.\n     * @param {string} [clearColor] - Clear the canvas with this color, except the canvas is transparent.\n     * @param {number} [alpha] - Alpha to apply to the background fill color.\n     */\n    public clear(clearColor: string = this._backgroundColorString, alpha: number = this.backgroundAlpha): void\n    {\n        const { context } = this;\n\n        context.clearRect(0, 0, this.width, this.height);\n\n        if (clearColor)\n        {\n            context.globalAlpha = this.useContextAlpha ? alpha : 1;\n            context.fillStyle = clearColor;\n            context.fillRect(0, 0, this.width, this.height);\n            context.globalAlpha = 1;\n        }\n    }\n\n    /**\n     * Sets the blend mode of the renderer.\n     * @param {number} blendMode - See {@link PIXI.BLEND_MODES} for valid values.\n     * @param {boolean} [readyForOuterBlend=false] - Some blendModes are dangerous, they affect outer space of sprite.\n     * Pass `true` only if you are ready to use them.\n     */\n    setBlendMode(blendMode: BLEND_MODES, readyForOuterBlend?: boolean): void\n    {\n        const outerBlend = blendMode === BLEND_MODES.SRC_IN\n            || blendMode === BLEND_MODES.SRC_OUT\n            || blendMode === BLEND_MODES.DST_IN\n            || blendMode === BLEND_MODES.DST_ATOP;\n\n        if (!readyForOuterBlend && outerBlend)\n        {\n            blendMode = BLEND_MODES.NORMAL;\n        }\n\n        if (this._activeBlendMode === blendMode)\n        {\n            return;\n        }\n\n        this._activeBlendMode = blendMode;\n        this._outerBlend = outerBlend;\n        this.context.globalCompositeOperation = this.blendModes[blendMode];\n    }\n\n    /**\n     * Removes everything from the renderer and optionally removes the Canvas DOM element.\n     * @param {boolean} [removeView=false] - Removes the Canvas element from the DOM.\n     */\n    public destroy(removeView?: boolean): void\n    {\n        // call the base destroy\n        super.destroy(removeView);\n\n        this.context = null;\n\n        this.refresh = true;\n\n        this.maskManager.destroy();\n        this.maskManager = null;\n\n        this.smoothProperty = null;\n    }\n\n    /**\n     * Resizes the canvas view to the specified width and height.\n     * @extends PIXI.AbstractRenderer#resize\n     * @param desiredScreenWidth - the desired width of the screen\n     * @param desiredScreenHeight - the desired height of the screen\n     */\n    public resize(desiredScreenWidth: number, desiredScreenHeight: number): void\n    {\n        super.resize(desiredScreenWidth, desiredScreenHeight);\n\n        // reset the scale mode.. oddly this seems to be reset when the canvas is resized.\n        // surely a browser bug?? Let PixiJS fix that for you..\n        if (this.smoothProperty)\n        {\n            this.rootContext[this.smoothProperty] = (settings.SCALE_MODE === SCALE_MODES.LINEAR);\n        }\n    }\n\n    /** Checks if blend mode has changed. */\n    invalidateBlendMode(): void\n    {\n        this._activeBlendMode = this.blendModes.indexOf(this.context.globalCompositeOperation);\n    }\n\n    static __plugins: IRendererPlugins = {};\n\n    /**\n     * Collection of installed plugins. These are included by default in PIXI, but can be excluded\n     * by creating a custom build. Consult the README for more information about creating custom\n     * builds and excluding plugins.\n     * @member {object} plugins\n     * @readonly\n     * @property {PIXI.AccessibilityManager} accessibility Support tabbing interactive elements.\n     * @property {PIXI.CanvasExtract} extract Extract image data from renderer.\n     * @property {PIXI.InteractionManager} interaction Handles mouse, touch and pointer events.\n     * @property {PIXI.CanvasPrepare} prepare Pre-render display objects.\n     */\n\n    /**\n     * Use the {@link PIXI.extensions.add} API to register plugins.\n     * @deprecated since 6.5.0\n     * @param pluginName - The name of the plugin.\n     * @param ctor - The constructor function or class for the plugin.\n     */\n    static registerPlugin(pluginName: string, ctor: ICanvasRendererPluginConstructor): void\n    {\n        // #if _DEBUG\n        deprecation('6.5.0', 'CanvasRenderer.registerPlugin() has been deprecated, please use extensions.add() instead.');\n        // #endif\n        extensions.add({\n            name: pluginName,\n            type: ExtensionType.CanvasRendererPlugin,\n            ref: ctor,\n        });\n    }\n}\n\nextensions.handleByMap(ExtensionType.CanvasRendererPlugin, CanvasRenderer.__plugins);\n","import { BLEND_MODES } from '@pixi/constants';\nimport { canUseNewCanvasBlendModes } from './canUseNewCanvasBlendModes';\n\n/**\n * Maps blend combinations to Canvas.\n * @memberof PIXI\n * @function mapCanvasBlendModesToPixi\n * @private\n * @param {string[]} [array=[]] - The array to output into.\n * @returns {string[]} Mapped modes.\n */\n// TODO after upgrading to typeScript 4.6, replace `string[]` with `GlobalCompositeOperation[]`\nexport function mapCanvasBlendModesToPixi(array: string[] = []): string[]\n{\n    if (canUseNewCanvasBlendModes())\n    {\n        array[BLEND_MODES.NORMAL] = 'source-over';\n        array[BLEND_MODES.ADD] = 'lighter'; // IS THIS OK???\n        array[BLEND_MODES.MULTIPLY] = 'multiply';\n        array[BLEND_MODES.SCREEN] = 'screen';\n        array[BLEND_MODES.OVERLAY] = 'overlay';\n        array[BLEND_MODES.DARKEN] = 'darken';\n        array[BLEND_MODES.LIGHTEN] = 'lighten';\n        array[BLEND_MODES.COLOR_DODGE] = 'color-dodge';\n        array[BLEND_MODES.COLOR_BURN] = 'color-burn';\n        array[BLEND_MODES.HARD_LIGHT] = 'hard-light';\n        array[BLEND_MODES.SOFT_LIGHT] = 'soft-light';\n        array[BLEND_MODES.DIFFERENCE] = 'difference';\n        array[BLEND_MODES.EXCLUSION] = 'exclusion';\n        array[BLEND_MODES.HUE] = 'hue';\n        array[BLEND_MODES.SATURATION] = 'saturation';\n        array[BLEND_MODES.COLOR] = 'color';\n        array[BLEND_MODES.LUMINOSITY] = 'luminosity';\n    }\n    else\n    {\n        // this means that the browser does not support the cool new blend modes in canvas 'cough' ie 'cough'\n        array[BLEND_MODES.NORMAL] = 'source-over';\n        array[BLEND_MODES.ADD] = 'lighter'; // IS THIS OK???\n        array[BLEND_MODES.MULTIPLY] = 'source-over';\n        array[BLEND_MODES.SCREEN] = 'source-over';\n        array[BLEND_MODES.OVERLAY] = 'source-over';\n        array[BLEND_MODES.DARKEN] = 'source-over';\n        array[BLEND_MODES.LIGHTEN] = 'source-over';\n        array[BLEND_MODES.COLOR_DODGE] = 'source-over';\n        array[BLEND_MODES.COLOR_BURN] = 'source-over';\n        array[BLEND_MODES.HARD_LIGHT] = 'source-over';\n        array[BLEND_MODES.SOFT_LIGHT] = 'source-over';\n        array[BLEND_MODES.DIFFERENCE] = 'source-over';\n        array[BLEND_MODES.EXCLUSION] = 'source-over';\n        array[BLEND_MODES.HUE] = 'source-over';\n        array[BLEND_MODES.SATURATION] = 'source-over';\n        array[BLEND_MODES.COLOR] = 'source-over';\n        array[BLEND_MODES.LUMINOSITY] = 'source-over';\n    }\n    // not-premultiplied, only for webgl\n    array[BLEND_MODES.NORMAL_NPM] = array[BLEND_MODES.NORMAL];\n    array[BLEND_MODES.ADD_NPM] = array[BLEND_MODES.ADD];\n    array[BLEND_MODES.SCREEN_NPM] = array[BLEND_MODES.SCREEN];\n\n    // composite operations\n    array[BLEND_MODES.SRC_IN] = 'source-in';\n    array[BLEND_MODES.SRC_OUT] = 'source-out';\n    array[BLEND_MODES.SRC_ATOP] = 'source-atop';\n    array[BLEND_MODES.DST_OVER] = 'destination-over';\n    array[BLEND_MODES.DST_IN] = 'destination-in';\n    array[BLEND_MODES.DST_OUT] = 'destination-out';\n    array[BLEND_MODES.DST_ATOP] = 'destination-atop';\n    array[BLEND_MODES.XOR] = 'xor';\n\n    // SUBTRACT from flash, does not exist in canvas\n    array[BLEND_MODES.SUBTRACT] = 'source-over';\n\n    return array;\n}\n","import { hex2rgb, rgb2hex } from '@pixi/utils';\nimport { settings } from '@pixi/settings';\nimport { canUseNewCanvasBlendModes } from './utils/canUseNewCanvasBlendModes';\n\nimport type { Texture } from '@pixi/core';\n\n/**\n * Utility methods for Sprite/Texture tinting.\n *\n * Tinting with the CanvasRenderer involves creating a new canvas to use as a texture,\n * so be aware of the performance implications.\n * @namespace PIXI.canvasUtils\n * @memberof PIXI\n */\nexport const canvasUtils = {\n    canvas: null as HTMLCanvasElement,\n\n    /**\n     * Basically this method just needs a sprite and a color and tints the sprite with the given color.\n     * @memberof PIXI.canvasUtils\n     * @param {PIXI.Sprite} sprite - the sprite to tint\n     * @param sprite.texture\n     * @param {number} color - the color to use to tint the sprite with\n     * @returns {HTMLCanvasElement} The tinted canvas\n     */\n    getTintedCanvas: (sprite: { texture: Texture }, color: number): HTMLCanvasElement | HTMLImageElement =>\n    {\n        const texture = sprite.texture;\n\n        color = canvasUtils.roundColor(color);\n\n        const stringColor = `#${(`00000${(color | 0).toString(16)}`).slice(-6)}`;\n\n        texture.tintCache = texture.tintCache || {};\n\n        const cachedCanvas = texture.tintCache[stringColor];\n\n        let canvas: HTMLCanvasElement;\n\n        if (cachedCanvas)\n        {\n            if (cachedCanvas.tintId === texture._updateID)\n            {\n                return texture.tintCache[stringColor];\n            }\n\n            canvas = texture.tintCache[stringColor] as HTMLCanvasElement;\n        }\n        else\n        {\n            canvas = settings.ADAPTER.createCanvas();\n        }\n\n        canvasUtils.tintMethod(texture, color, canvas);\n\n        canvas.tintId = texture._updateID;\n\n        if (canvasUtils.convertTintToImage)\n        {\n            // is this better?\n            const tintImage = new Image();\n\n            tintImage.src = (canvas as HTMLCanvasElement).toDataURL();\n\n            texture.tintCache[stringColor] = tintImage;\n        }\n        else\n        {\n            texture.tintCache[stringColor] = canvas;\n        }\n\n        return canvas;\n    },\n\n    /**\n     * Basically this method just needs a sprite and a color and tints the sprite with the given color.\n     * @memberof PIXI.canvasUtils\n     * @param {PIXI.Texture} texture - the sprite to tint\n     * @param {number} color - the color to use to tint the sprite with\n     * @returns {HTMLCanvasElement} The tinted canvas\n     */\n    getTintedPattern: (texture: Texture, color: number): CanvasPattern =>\n    {\n        color = canvasUtils.roundColor(color);\n\n        const stringColor = `#${(`00000${(color | 0).toString(16)}`).slice(-6)}`;\n\n        texture.patternCache = texture.patternCache || {};\n\n        let pattern = texture.patternCache[stringColor];\n\n        if (pattern && pattern.tintId === texture._updateID)\n        {\n            return pattern;\n        }\n        if (!canvasUtils.canvas)\n        {\n            canvasUtils.canvas = settings.ADAPTER.createCanvas();\n        }\n        canvasUtils.tintMethod(texture, color, canvasUtils.canvas);\n        pattern = canvasUtils.canvas.getContext('2d').createPattern(canvasUtils.canvas, 'repeat');\n        pattern.tintId = texture._updateID;\n        texture.patternCache[stringColor] = pattern;\n\n        return pattern;\n    },\n\n    /**\n     * Tint a texture using the 'multiply' operation.\n     * @memberof PIXI.canvasUtils\n     * @param {PIXI.Texture} texture - the texture to tint\n     * @param {number} color - the color to use to tint the sprite with\n     * @param {HTMLCanvasElement} canvas - the current canvas\n     */\n    tintWithMultiply: (texture: Texture, color: number, canvas: HTMLCanvasElement): void =>\n    {\n        const context = canvas.getContext('2d');\n        const crop = texture._frame.clone();\n        const resolution = texture.baseTexture.resolution;\n\n        crop.x *= resolution;\n        crop.y *= resolution;\n        crop.width *= resolution;\n        crop.height *= resolution;\n\n        canvas.width = Math.ceil(crop.width);\n        canvas.height = Math.ceil(crop.height);\n\n        context.save();\n        context.fillStyle = `#${(`00000${(color | 0).toString(16)}`).slice(-6)}`;\n\n        context.fillRect(0, 0, crop.width, crop.height);\n\n        context.globalCompositeOperation = 'multiply';\n\n        const source = texture.baseTexture.getDrawableSource();\n\n        context.drawImage(\n            source,\n            crop.x,\n            crop.y,\n            crop.width,\n            crop.height,\n            0,\n            0,\n            crop.width,\n            crop.height\n        );\n\n        context.globalCompositeOperation = 'destination-atop';\n\n        context.drawImage(\n            source,\n            crop.x,\n            crop.y,\n            crop.width,\n            crop.height,\n            0,\n            0,\n            crop.width,\n            crop.height\n        );\n        context.restore();\n    },\n\n    /**\n     * Tint a texture using the 'overlay' operation.\n     * @memberof PIXI.canvasUtils\n     * @param {PIXI.Texture} texture - the texture to tint\n     * @param {number} color - the color to use to tint the sprite with\n     * @param {HTMLCanvasElement} canvas - the current canvas\n     */\n    tintWithOverlay: (texture: Texture, color: number, canvas: HTMLCanvasElement): void =>\n    {\n        const context = canvas.getContext('2d');\n        const crop = texture._frame.clone();\n        const resolution = texture.baseTexture.resolution;\n\n        crop.x *= resolution;\n        crop.y *= resolution;\n        crop.width *= resolution;\n        crop.height *= resolution;\n\n        canvas.width = Math.ceil(crop.width);\n        canvas.height = Math.ceil(crop.height);\n\n        context.save();\n        context.globalCompositeOperation = 'copy';\n        context.fillStyle = `#${(`00000${(color | 0).toString(16)}`).slice(-6)}`;\n        context.fillRect(0, 0, crop.width, crop.height);\n\n        context.globalCompositeOperation = 'destination-atop';\n        context.drawImage(\n            texture.baseTexture.getDrawableSource(),\n            crop.x,\n            crop.y,\n            crop.width,\n            crop.height,\n            0,\n            0,\n            crop.width,\n            crop.height\n        );\n\n        // context.globalCompositeOperation = 'copy';\n        context.restore();\n    },\n\n    /**\n     * Tint a texture pixel per pixel.\n     * @memberof PIXI.canvasUtils\n     * @param {PIXI.Texture} texture - the texture to tint\n     * @param {number} color - the color to use to tint the sprite with\n     * @param {HTMLCanvasElement} canvas - the current canvas\n     */\n    tintWithPerPixel: (texture: Texture, color: number, canvas: HTMLCanvasElement): void =>\n    {\n        const context = canvas.getContext('2d');\n        const crop = texture._frame.clone();\n        const resolution = texture.baseTexture.resolution;\n\n        crop.x *= resolution;\n        crop.y *= resolution;\n        crop.width *= resolution;\n        crop.height *= resolution;\n\n        canvas.width = Math.ceil(crop.width);\n        canvas.height = Math.ceil(crop.height);\n\n        context.save();\n        context.globalCompositeOperation = 'copy';\n        context.drawImage(\n            texture.baseTexture.getDrawableSource(),\n            crop.x,\n            crop.y,\n            crop.width,\n            crop.height,\n            0,\n            0,\n            crop.width,\n            crop.height\n        );\n        context.restore();\n\n        const rgbValues = hex2rgb(color);\n        const r = rgbValues[0];\n        const g = rgbValues[1];\n        const b = rgbValues[2];\n\n        const pixelData = context.getImageData(0, 0, crop.width, crop.height);\n\n        const pixels = pixelData.data;\n\n        for (let i = 0; i < pixels.length; i += 4)\n        {\n            pixels[i + 0] *= r;\n            pixels[i + 1] *= g;\n            pixels[i + 2] *= b;\n        }\n\n        context.putImageData(pixelData, 0, 0);\n    },\n\n    /**\n     * Rounds the specified color according to the canvasUtils.cacheStepsPerColorChannel.\n     * @memberof PIXI.canvasUtils\n     * @param {number} color - the color to round, should be a hex color\n     * @returns {number} The rounded color.\n     */\n    roundColor: (color: number): number =>\n    {\n        const step = canvasUtils.cacheStepsPerColorChannel;\n\n        const rgbValues = hex2rgb(color);\n\n        rgbValues[0] = Math.min(255, (rgbValues[0] / step) * step);\n        rgbValues[1] = Math.min(255, (rgbValues[1] / step) * step);\n        rgbValues[2] = Math.min(255, (rgbValues[2] / step) * step);\n\n        return rgb2hex(rgbValues);\n    },\n\n    /**\n     * Number of steps which will be used as a cap when rounding colors.\n     * @memberof PIXI.canvasUtils\n     * @type {number}\n     */\n    cacheStepsPerColorChannel: 8,\n\n    /**\n     * Tint cache boolean flag.\n     * @memberof PIXI.canvasUtils\n     * @type {boolean}\n     */\n    convertTintToImage: false,\n\n    /**\n     * Whether or not the Canvas BlendModes are supported, consequently the ability to tint using the multiply method.\n     * @memberof PIXI.canvasUtils\n     * @type {boolean}\n     */\n    canUseMultiply: canUseNewCanvasBlendModes(),\n\n    /**\n     * The tinting method that will be used.\n     * @memberof PIXI.canvasUtils\n     * @type {Function}\n     */\n    tintMethod: null as (texture: Texture, color: number, canvas: HTMLCanvasElement) => void,\n};\n\ncanvasUtils.tintMethod = canvasUtils.canUseMultiply ? canvasUtils.tintWithMultiply : canvasUtils.tintWithPerPixel;\n","import { Renderer } from '@pixi/core';\nimport { CanvasRenderer } from './CanvasRenderer';\n\nimport type { AbstractRenderer, IRendererOptionsAuto } from '@pixi/core';\n\n// Reference to Renderer.create static function\nconst parentCreate = Renderer.create;\n\n/**\n * Override the Renderer.create to fallback to use CanvasRenderer.\n * Also supports forceCanvas option with Application or autoDetectRenderer.\n * @param options\n * @private\n */\nRenderer.create = function create(options: IRendererOptionsAuto): AbstractRenderer\n{\n    const forceCanvas = options && options.forceCanvas;\n\n    if (!forceCanvas)\n    {\n        try\n        {\n            return parentCreate(options);\n        }\n        catch (err)\n        {\n            // swallow WebGL-unsupported error\n        }\n    }\n\n    return new CanvasRenderer(options);\n};\n","import { BaseTexture, BaseRenderTexture, Texture } from '@pixi/core';\n\n/**\n * Get the drawable source, such as HTMLCanvasElement or HTMLImageElement suitable\n * for rendering with CanvasRenderer. Provided by **@pixi/canvas-renderer** package.\n * @method getDrawableSource\n * @memberof PIXI.BaseTexture#\n * @returns {PIXI.ICanvasImageSource} Source to render with CanvasRenderer\n */\nBaseTexture.prototype.getDrawableSource = function getDrawableSource(): CanvasImageSource\n{\n    const resource = this.resource as any;\n\n    return resource ? (resource.bitmap || resource.source) : null;\n};\n\n/**\n * A reference to the canvas render target (we only need one as this can be shared across renderers)\n * @protected\n * @member {PIXI.utils.CanvasRenderTarget} _canvasRenderTarget\n * @memberof PIXI.BaseRenderTexture#\n */\n\nBaseRenderTexture.prototype._canvasRenderTarget = null;\n\nTexture.prototype.patternCache = null;\n\nTexture.prototype.tintCache = null;\n"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","CanvasMaskManager","renderer","this","_foundShapes","prototype","pushMask","maskData","maskObject","context","save","foundShapes","recursiveFindShapes","length","beginPath","i","shape","transform","worldTransform","setContextTransform","renderGraphicsShape","clip","container","out","geometry","graphicsData","push","children","graphics","finishPoly","len","data","type","SHAPES","POLY","points","holes","outerArea","innerArea","px","py","moveTo","j","lineTo","k","closeStroke","closePath","RECT","rect","x","y","width","height","CIRC","arc","radius","Math","PI","ELIP","w","h","kappa","ox","oy","xe","ye","xm","ym","bezierCurveTo","RREC","rx","ry","maxRadius","min","quadraticCurveTo","popMask","restore","invalidateBlendMode","destroy","createColoredCanvas","color","canvas","settings","ADAPTER","createCanvas","getContext","fillStyle","fillRect","canUseNewCanvasBlendModes","document","magenta","yellow","globalCompositeOperation","drawImage","imageData","getImageData","tempMatrix","Matrix","CanvasRenderer","_super","options","array","_this","RENDERER_TYPE","CANVAS","refresh","maskManager","smoothProperty","blendModes","BLEND_MODES","NORMAL","ADD","MULTIPLY","SCREEN","OVERLAY","DARKEN","LIGHTEN","COLOR_DODGE","COLOR_BURN","HARD_LIGHT","SOFT_LIGHT","DIFFERENCE","EXCLUSION","HUE","SATURATION","COLOR","LUMINOSITY","NORMAL_NPM","ADD_NPM","SCREEN_NPM","SRC_IN","SRC_OUT","SRC_ATOP","DST_OVER","DST_IN","DST_OUT","DST_ATOP","XOR","SUBTRACT","renderingToScreen","_activeBlendMode","_projTransform","_outerBlend","rootContext","view","alpha","useContextAlpha","imageSmoothingEnabled","rc","webkitImageSmoothingEnabled","mozImageSmoothingEnabled","oImageSmoothingEnabled","msImageSmoothingEnabled","initPlugins","__plugins","sayHello","resize","__","constructor","create","__extends","addSystem","render","displayObject","renderTexture","clear","skipUpdateTransform","RenderTexture","BaseRenderTexture","arguments","emit","rootResolution","resolution","castToBaseTexture","_canvasRenderTarget","CanvasRenderTarget","resource","CanvasResource","valid","_lastObjectRendered","cacheParent","enableTempParent","updateTransform","disableTempParent","setTransform","globalAlpha","undefined","clearBeforeRender","clearRect","backgroundAlpha","_backgroundColorString","clearColor","hex2string","rgb2hex","realWidth","realHeight","tempContext","renderCanvas","roundPixels","localResolution","mat","proj","copyFrom","prepend","a","c","tx","ty","setBlendMode","blendMode","readyForOuterBlend","outerBlend","removeView","call","desiredScreenWidth","desiredScreenHeight","SCALE_MODE","SCALE_MODES","LINEAR","indexOf","registerPlugin","pluginName","ctor","extensions","add","name","ExtensionType","CanvasRendererPlugin","ref","AbstractRenderer","handleByMap","canvasUtils","getTintedCanvas","sprite","texture","stringColor","roundColor","toString","slice","tintCache","cachedCanvas","tintId","_updateID","tintMethod","convertTintToImage","tintImage","Image","src","toDataURL","getTintedPattern","patternCache","pattern","createPattern","tintWithMultiply","crop","_frame","clone","baseTexture","ceil","source","getDrawableSource","tintWithOverlay","tintWithPerPixel","rgbValues","hex2rgb","r","g","pixelData","pixels","putImageData","step","cacheStepsPerColorChannel","canUseMultiply","parentCreate","Renderer","forceCanvas","err","BaseTexture","bitmap","Texture"],"mappings":"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"}