/*!
 * @pixi/canvas-extract - v6.5.10
 * Compiled Thu, 06 Jul 2023 15:25:11 UTC
 *
 * @pixi/canvas-extract is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */
this.PIXI = this.PIXI || {};
var _pixi_canvas_extract = (function (exports, core, utils, math) {
    'use strict';

    var TEMP_RECT = new math.Rectangle();
    /**
     * The extract manager provides functionality to export content from the renderers.
     *
     * An instance of this class is automatically created by default, and can be found at `renderer.plugins.extract`
     * @class
     * @memberof PIXI
     */
    var CanvasExtract = /** @class */ (function () {
        /**
         * @param renderer - A reference to the current renderer
         */
        function CanvasExtract(renderer) {
            this.renderer = renderer;
        }
        /**
         * Will return a HTML Image of the target
         * @param target - A displayObject or renderTexture
         *  to convert. If left empty will use the main renderer
         * @param format - Image format, e.g. "image/jpeg" or "image/webp".
         * @param quality - JPEG or Webp compression from 0 to 1. Default is 0.92.
         * @returns HTML Image of the target
         */
        CanvasExtract.prototype.image = function (target, format, quality) {
            var image = new Image();
            image.src = this.base64(target, format, quality);
            return image;
        };
        /**
         * Will return a base64 encoded string of this target. It works by calling
         *  `CanvasExtract.getCanvas` and then running toDataURL on that.
         * @param target - A displayObject or renderTexture
         *  to convert. If left empty will use the main renderer
         * @param format - Image format, e.g. "image/jpeg" or "image/webp".
         * @param quality - JPEG or Webp compression from 0 to 1. Default is 0.92.
         * @returns A base64 encoded string of the texture.
         */
        CanvasExtract.prototype.base64 = function (target, format, quality) {
            return this.canvas(target).toDataURL(format, quality);
        };
        /**
         * Creates a Canvas element, renders this target to it and then returns it.
         * @param target - A displayObject or renderTexture
         *  to convert. If left empty will use the main renderer
         * @param frame - The frame the extraction is restricted to.
         * @returns A Canvas element with the texture rendered on.
         */
        CanvasExtract.prototype.canvas = function (target, frame) {
            var renderer = this.renderer;
            var context;
            var resolution;
            var renderTexture;
            if (target) {
                if (target instanceof core.RenderTexture) {
                    renderTexture = target;
                }
                else {
                    renderTexture = renderer.generateTexture(target);
                }
            }
            if (renderTexture) {
                context = renderTexture.baseTexture._canvasRenderTarget.context;
                resolution = renderTexture.baseTexture._canvasRenderTarget.resolution;
                frame = frame !== null && frame !== void 0 ? frame : renderTexture.frame;
            }
            else {
                context = renderer.rootContext;
                resolution = renderer.resolution;
                if (!frame) {
                    frame = TEMP_RECT;
                    frame.width = renderer.width;
                    frame.height = renderer.height;
                }
            }
            var x = Math.round(frame.x * resolution);
            var y = Math.round(frame.y * resolution);
            var width = Math.round(frame.width * resolution);
            var height = Math.round(frame.height * resolution);
            var canvasBuffer = new utils.CanvasRenderTarget(width, height, 1);
            var canvasData = context.getImageData(x, y, width, height);
            canvasBuffer.context.putImageData(canvasData, 0, 0);
            // send the canvas back..
            return canvasBuffer.canvas;
        };
        /**
         * Will return a one-dimensional array containing the pixel data of the entire texture in RGBA
         * order, with integer values between 0 and 255 (included).
         * @param target - A displayObject or renderTexture
         *  to convert. If left empty will use the main renderer
         * @param frame - The frame the extraction is restricted to.
         * @returns One-dimensional array containing the pixel data of the entire texture
         */
        CanvasExtract.prototype.pixels = function (target, frame) {
            var renderer = this.renderer;
            var context;
            var resolution;
            var renderTexture;
            if (target) {
                if (target instanceof core.RenderTexture) {
                    renderTexture = target;
                }
                else {
                    renderTexture = renderer.generateTexture(target);
                }
            }
            if (renderTexture) {
                context = renderTexture.baseTexture._canvasRenderTarget.context;
                resolution = renderTexture.baseTexture._canvasRenderTarget.resolution;
                frame = frame !== null && frame !== void 0 ? frame : renderTexture.frame;
            }
            else {
                context = renderer.rootContext;
                resolution = renderer.resolution;
                if (!frame) {
                    frame = TEMP_RECT;
                    frame.width = renderer.width;
                    frame.height = renderer.height;
                }
            }
            var x = Math.round(frame.x * resolution);
            var y = Math.round(frame.y * resolution);
            var width = Math.round(frame.width * resolution);
            var height = Math.round(frame.height * resolution);
            return context.getImageData(x, y, width, height).data;
        };
        /** Destroys the extract */
        CanvasExtract.prototype.destroy = function () {
            this.renderer = null;
        };
        /** @ignore */
        CanvasExtract.extension = {
            name: 'extract',
            type: core.ExtensionType.CanvasRendererPlugin,
        };
        return CanvasExtract;
    }());

    exports.CanvasExtract = CanvasExtract;

    Object.defineProperty(exports, '__esModule', { value: true });

    return exports;

})({}, PIXI, PIXI.utils, PIXI);
Object.assign(this.PIXI, _pixi_canvas_extract);
//# sourceMappingURL=canvas-extract.js.map
