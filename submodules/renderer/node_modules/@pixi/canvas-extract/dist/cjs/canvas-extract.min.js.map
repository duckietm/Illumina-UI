{"version":3,"file":"canvas-extract.min.js","sources":["../../src/CanvasExtract.ts"],"sourcesContent":["import { ExtensionType, RenderTexture } from '@pixi/core';\nimport { CanvasRenderTarget } from '@pixi/utils';\nimport { Rectangle } from '@pixi/math';\nimport type { CanvasRenderer } from '@pixi/canvas-renderer';\nimport type { DisplayObject } from '@pixi/display';\nimport type { BaseRenderTexture, ExtensionMetadata } from '@pixi/core';\n\nconst TEMP_RECT = new Rectangle();\n\n/**\n * The extract manager provides functionality to export content from the renderers.\n *\n * An instance of this class is automatically created by default, and can be found at `renderer.plugins.extract`\n * @class\n * @memberof PIXI\n */\nexport class CanvasExtract\n{\n    /** @ignore */\n    static extension: ExtensionMetadata = {\n        name: 'extract',\n        type: ExtensionType.CanvasRendererPlugin,\n    };\n\n    /** A reference to the current renderer */\n    public renderer: CanvasRenderer;\n\n    /**\n     * @param renderer - A reference to the current renderer\n     */\n    constructor(renderer: CanvasRenderer)\n    {\n        this.renderer = renderer;\n    }\n\n    /**\n     * Will return a HTML Image of the target\n     * @param target - A displayObject or renderTexture\n     *  to convert. If left empty will use the main renderer\n     * @param format - Image format, e.g. \"image/jpeg\" or \"image/webp\".\n     * @param quality - JPEG or Webp compression from 0 to 1. Default is 0.92.\n     * @returns HTML Image of the target\n     */\n    public image(target?: DisplayObject | RenderTexture, format?: string, quality?: number): HTMLImageElement\n    {\n        const image = new Image();\n\n        image.src = this.base64(target, format, quality);\n\n        return image;\n    }\n\n    /**\n     * Will return a base64 encoded string of this target. It works by calling\n     *  `CanvasExtract.getCanvas` and then running toDataURL on that.\n     * @param target - A displayObject or renderTexture\n     *  to convert. If left empty will use the main renderer\n     * @param format - Image format, e.g. \"image/jpeg\" or \"image/webp\".\n     * @param quality - JPEG or Webp compression from 0 to 1. Default is 0.92.\n     * @returns A base64 encoded string of the texture.\n     */\n    public base64(target?: DisplayObject | RenderTexture, format?: string, quality?: number): string\n    {\n        return this.canvas(target).toDataURL(format, quality);\n    }\n\n    /**\n     * Creates a Canvas element, renders this target to it and then returns it.\n     * @param target - A displayObject or renderTexture\n     *  to convert. If left empty will use the main renderer\n     * @param frame - The frame the extraction is restricted to.\n     * @returns A Canvas element with the texture rendered on.\n     */\n    public canvas(target?: DisplayObject | RenderTexture, frame?: Rectangle): HTMLCanvasElement\n    {\n        const renderer = this.renderer;\n        let context;\n        let resolution;\n        let renderTexture;\n\n        if (target)\n        {\n            if (target instanceof RenderTexture)\n            {\n                renderTexture = target;\n            }\n            else\n            {\n                renderTexture = renderer.generateTexture(target);\n            }\n        }\n\n        if (renderTexture)\n        {\n            context = (renderTexture.baseTexture as BaseRenderTexture)._canvasRenderTarget.context;\n            resolution = (renderTexture.baseTexture as BaseRenderTexture)._canvasRenderTarget.resolution;\n            frame = frame ?? renderTexture.frame;\n        }\n        else\n        {\n            context = renderer.rootContext;\n            resolution = renderer.resolution;\n\n            if (!frame)\n            {\n                frame = TEMP_RECT;\n                frame.width = renderer.width;\n                frame.height = renderer.height;\n            }\n        }\n\n        const x = Math.round(frame.x * resolution);\n        const y = Math.round(frame.y * resolution);\n        const width = Math.round(frame.width * resolution);\n        const height = Math.round(frame.height * resolution);\n\n        const canvasBuffer = new CanvasRenderTarget(width, height, 1);\n        const canvasData = context.getImageData(x, y, width, height);\n\n        canvasBuffer.context.putImageData(canvasData, 0, 0);\n\n        // send the canvas back..\n        return canvasBuffer.canvas;\n    }\n\n    /**\n     * Will return a one-dimensional array containing the pixel data of the entire texture in RGBA\n     * order, with integer values between 0 and 255 (included).\n     * @param target - A displayObject or renderTexture\n     *  to convert. If left empty will use the main renderer\n     * @param frame - The frame the extraction is restricted to.\n     * @returns One-dimensional array containing the pixel data of the entire texture\n     */\n    public pixels(target?: DisplayObject | RenderTexture, frame?: Rectangle): Uint8ClampedArray\n    {\n        const renderer = this.renderer;\n        let context;\n        let resolution;\n        let renderTexture;\n\n        if (target)\n        {\n            if (target instanceof RenderTexture)\n            {\n                renderTexture = target;\n            }\n            else\n            {\n                renderTexture = renderer.generateTexture(target);\n            }\n        }\n\n        if (renderTexture)\n        {\n            context = (renderTexture.baseTexture as BaseRenderTexture)._canvasRenderTarget.context;\n            resolution = (renderTexture.baseTexture as BaseRenderTexture)._canvasRenderTarget.resolution;\n            frame = frame ?? renderTexture.frame;\n        }\n        else\n        {\n            context = renderer.rootContext;\n            resolution = renderer.resolution;\n\n            if (!frame)\n            {\n                frame = TEMP_RECT;\n                frame.width = renderer.width;\n                frame.height = renderer.height;\n            }\n        }\n\n        const x = Math.round(frame.x * resolution);\n        const y = Math.round(frame.y * resolution);\n        const width = Math.round(frame.width * resolution);\n        const height = Math.round(frame.height * resolution);\n\n        return context.getImageData(x, y, width, height).data;\n    }\n\n    /** Destroys the extract */\n    public destroy(): void\n    {\n        this.renderer = null;\n    }\n}\n"],"names":["TEMP_RECT","Rectangle","CanvasExtract","renderer","this","prototype","image","target","format","quality","Image","src","base64","canvas","toDataURL","frame","context","resolution","renderTexture","RenderTexture","generateTexture","baseTexture","_canvasRenderTarget","rootContext","width","height","x","Math","round","y","canvasBuffer","CanvasRenderTarget","canvasData","getImageData","putImageData","pixels","data","destroy","extension","name","type","ExtensionType","CanvasRendererPlugin"],"mappings":";;;;;;;yHAOMA,EAAY,0BAAIC,WAStBC,EAAA,WAcI,SAAAA,EAAYC,GAERC,KAAKD,SAAWA,EAwJxB,OA7IWD,EAAAG,UAAAC,MAAP,SAAaC,EAAwCC,EAAiBC,GAElE,IAAMH,EAAQ,IAAII,MAIlB,OAFAJ,EAAMK,IAAMP,KAAKQ,OAAOL,EAAQC,EAAQC,GAEjCH,GAYJJ,EAAAG,UAAAO,OAAP,SAAcL,EAAwCC,EAAiBC,GAEnE,OAAOL,KAAKS,OAAON,GAAQO,UAAUN,EAAQC,IAU1CP,EAAAG,UAAAQ,OAAP,SAAcN,EAAwCQ,GAElD,IACIC,EACAC,EACAC,EAHEf,EAAWC,KAAKD,SAKlBI,IAIIW,EAFAX,aAAkBY,EAAAA,cAEFZ,EAIAJ,EAASiB,gBAAgBb,IAI7CW,GAEAF,EAAWE,EAAcG,YAAkCC,oBAAoBN,QAC/EC,EAAcC,EAAcG,YAAkCC,oBAAoBL,WAClFF,EAAQA,MAAAA,EAAAA,EAASG,EAAcH,QAI/BC,EAAUb,EAASoB,YACnBN,EAAad,EAASc,WAEjBF,KAEDA,EAAQf,GACFwB,MAAQrB,EAASqB,MACvBT,EAAMU,OAAStB,EAASsB,SAIhC,IAAMC,EAAIC,KAAKC,MAAMb,EAAMW,EAAIT,GACzBY,EAAIF,KAAKC,MAAMb,EAAMc,EAAIZ,GACzBO,EAAQG,KAAKC,MAAMb,EAAMS,MAAQP,GACjCQ,EAASE,KAAKC,MAAMb,EAAMU,OAASR,GAEnCa,EAAe,IAAIC,EAAkBA,mBAACP,EAAOC,EAAQ,GACrDO,EAAahB,EAAQiB,aAAaP,EAAGG,EAAGL,EAAOC,GAKrD,OAHAK,EAAad,QAAQkB,aAAaF,EAAY,EAAG,GAG1CF,EAAajB,QAWjBX,EAAAG,UAAA8B,OAAP,SAAc5B,EAAwCQ,GAElD,IACIC,EACAC,EACAC,EAHEf,EAAWC,KAAKD,SAKlBI,IAIIW,EAFAX,aAAkBY,EAAAA,cAEFZ,EAIAJ,EAASiB,gBAAgBb,IAI7CW,GAEAF,EAAWE,EAAcG,YAAkCC,oBAAoBN,QAC/EC,EAAcC,EAAcG,YAAkCC,oBAAoBL,WAClFF,EAAQA,MAAAA,EAAAA,EAASG,EAAcH,QAI/BC,EAAUb,EAASoB,YACnBN,EAAad,EAASc,WAEjBF,KAEDA,EAAQf,GACFwB,MAAQrB,EAASqB,MACvBT,EAAMU,OAAStB,EAASsB,SAIhC,IAAMC,EAAIC,KAAKC,MAAMb,EAAMW,EAAIT,GACzBY,EAAIF,KAAKC,MAAMb,EAAMc,EAAIZ,GACzBO,EAAQG,KAAKC,MAAMb,EAAMS,MAAQP,GACjCQ,EAASE,KAAKC,MAAMb,EAAMU,OAASR,GAEzC,OAAOD,EAAQiB,aAAaP,EAAGG,EAAGL,EAAOC,GAAQW,MAI9ClC,EAAAG,UAAAgC,QAAP,WAEIjC,KAAKD,SAAW,MAnKbD,EAAAoC,UAA+B,CAClCC,KAAM,UACNC,KAAMC,EAAaA,cAACC,sBAmK3BxC"}